// output: abcdefgdoneclosing

extern type FILE;

extern "C" fun fopen(filename: c_string, mode: c_string) -> FILE?
extern "C" fun fclose(file: FILE?) -> c_int;
extern "C" fun fgetc(file: FILE?) -> c_int;

fun cleanup(f: FILE?) {
    println(c"closing")
    unsafe { fclose(f) }
}

enum Output {
    EOF
    Char(c_int)
}

class File {
    file: FILE?

    fun open(fname: c_string) -> File {
        unsafe {
            let file = fopen(fname, c"rb")
            defer file cleanup

            return new File(file: file)
        }
    }

    fun get_char(mut self) -> Output {
        unsafe {
            let x = fgetc(self.file)

            if x == -1 {
                return Output::EOF
            } else {
                return Output::Char(x)
            }
        }
    }
}

fun main() {
    mut file = File::open(c"tests/test_data/alphabet.txt");
    while true {
        let x = file.get_char();

        match x {
            Output::EOF => {
                println(c"done")
                break
            }
            Output::Char(c) => {
                if c != 10 && c != 13 {
                    println(c as c_char)                
                }
            }
        }
    }
}
